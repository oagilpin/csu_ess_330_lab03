---
title: "Lab 3: COVID-19"
subtitle: 'Ecosystem Science and Sustainability 330'
author: 
  name: "Olivia Gilpin: [GitHub](https://github.com/oagilpin)" 
  email: "ogilpin@colostate.edu"
format: html
theme: Sky
editor: visual
---

```{r}
library(tidyverse) 
library(flextable)  
library(zoo) 
```

#Question 1: Public Data

```{r}
url = 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv'
covid = read_csv(url)
```
#Q1: Reflect on the value of open data -- Having access to open data is extremely valuable, and we experienced this in ArcGIS prior, as otherwise you coud have to go through multiple outlets just to obtain data access which henders our ability to perserve the integrity of scientific progress and ensure accountability.

#Quesiton 2: Daily Summary

```{r}
txt <- "2022-02-01"
class(txt)

my.date <- as.Date("2022-02-01")
my.state <- "Colorado"

```

```{r}
colorado <- covid |>
  filter(state == "Colorado") |>
  group_by(county)|>
  arrange(date) |>
  mutate(new_cases = cases - lag(cases),
         new_deaths = deaths - lag(deaths)) |>
  ungroup()
```

```{r}
filter(colorado, date == my.date) |>
  slice_max(cases, n=5) |>
  select(Date = date, County = county, Cases = cases) |>
  flextable() |>
  set_caption("Counties with the Most Total Cases in Colorado")

filter(colorado, date == my.date) |>
  slice_max(cases, n=5) |>
  select(Date = date, County = county, Cases = new_cases) |>
  flextable() |>
  set_caption(caption = "Most New Cases by Colorado Counties")
```

#Question 3: Normalizing Data

```{r}
pop_url <- 'https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/counties/totals/co-est2023-alldata.csv'

pop <- read.csv(pop_url) |>
  filter(COUNTY !=0) |>
  mutate(fips = paste0(sprintf("%02d", STATE),
                       sprintf("%03d", COUNTY))) |>
  select(fips, contains('NAME'), contains('2021'))
```

```{r}
names(pop)
dim(pop)
nrow(pop)
str (pop)
```
#Q3 - Part 2: The data obtained after modification contains a numerous amount od population metrics for each county in 2021. Of these population metrics, it includes statistics about birht, death, populations, and migration. These all all useful metrics for analyzing demographic trends in correlation to the impacts of migration and overall understanding population changes across various regions and at the county levels. 

#Q3 - Part 3: Range of populations seen in Colorado counties in 2021: The range of populations seen in Colorado counties was 54 out of 9,809,462 people in 2021. 

```{r}
range(pop$POPESTIMATE2021)
```
#Join the population data to the Colorado COVID data and compute the per capita cumulative cases, per capita new cases, and per capita new deaths

```{r}
pop2 <- pop |>
  rename(state = STNAME)

perCap = inner_join(colorado, select(pop,
                                     fips,
                                     pop = POPESTIMATE2021),
                    by = 'fips') |>
  filter(date == my.date) |>
  mutate(cumPerCap = cases / pop,
         newCasesPerCap = new_cases / pop,
         newDeathsPerCap = new_deaths / pop)

perCap |>
  summarize(totalcumulativecases = sum(cumPerCap),
            totalnewcases = sum(newCasesPerCap),
            totalnewdeaths = sum(newDeathsPerCap))
```

```{r}
perCap |>
  select(County = county, Cases = cumPerCap) |>
  slice_max(Cases, n=5) |>
  flextable() |>
  set_caption(caption = "Top 5 Counties with the Highest Per Capita Cumulative Cases")

perCap |> 
  select(County = county, Cases = newCasesPerCap) |>
  slice_max(Cases, n=5) |>
  flextable() |>
  set_caption(caption = "Top 5 Counties with the Highest Per Capita New Cases")
```

#Question 4: Rolling thresholds

```{r}
safe <- pop2 |>
  inner_join(colorado, by = "fips") |>
  filter(between(date, my.date - 13, my.date)) |>
  group_by(county) |>
  summarize(lag = sum(new_cases)/(POPESTIMATE2021[1]/100000)) |>
  ungroup()

safe |>
  select(County = county, Cases = lag) |>
  slice_max(Cases, n = 5) |>
  flextable() |>
  set_caption(caption = "Cases per 100,000 in the last 14 days")
```

#Question 5: Death Toll

```{r}
tmp.date = as.Date("2022-02-01")

lubridate::year(tmp.date)

lubridate::month(tmp.date)

lubridate::yday(tmp.date)

x <- colorado |>
  mutate(year = lubridate::year(date)) |>
  filter(year == 2021) |>
  group_by(fips) |>
  summarize(totdeaths = sum(new_deaths, na.rm = TRUE)) |>
  left_join(pop, by = c("fips")) |>
  mutate(death_ratio = 100 * (totdeaths / DEATHS2021)) |>
  select(CTYNAME, totdeaths, DEATHS2021, death_ratio) |>
  filter(death_ratio > 20)

ggplot(x) +
  geom_col(aes(x = death_ratio, y = CTYNAME)) +
  theme_light() +
  labs(
    title = "2021 Death Ratios by County in Colorado",
    x = "Death Ratio",   
    y = "County Name"    
  )
```

```{r}
ggplot(x) +
  geom_col(aes(x = death_ratio, y = CTYNAME)) +
  theme_light() +
  labs(
    x = "Death Ratio (%)",  
    y = "County Name",  
    title = "Colorado Counties Where COVID-19 Accounted for 20% or More of Total Deaths in 2021"  
  )
```

#Question 6: Multi-state

```{r}
state_covid = covid |>
  group_by(date, state) |>
  summarize(cases = sum(cases), .groups = "drop") |>
  filter(state %in% c("New York", "Ohio", "Colorado", "Alabama")) |>
  group_by(state) |>
  mutate(NewCases = cases - lag(cases),
         roll = zoo::rollmean(NewCases, k = 7, align = "right", fill = NA)) |>
  ungroup()
```

```{r}
ggplot(state_covid, aes(x = date)) +
  geom_col(aes(y = NewCases), fill = "purple", col = NA) +
  geom_line(aes(y = roll), col = "green", size = 0.5) +
  theme_linedraw() +
  facet_wrap(~state, nrow = 2, scales = "free_y") +
  labs(title = "Cumulative COVID Cases by State", x = "Date", y = "Case Count")

```

#Q6: Step 3

```{r}
state_capita <- inner_join(state_covid, pop2, by = "state") |>
  filter(date == my.date) |>
  mutate(cumPerCap = cases / POPESTIMATE2021,
         newCasesPerCap = NewCases / POPESTIMATE2021)

state_capita |>
  filter(state == "Colorado") |>
  summarize(sum(newCasesPerCap))

state_capita |>
  filter(state == "Alabama") |>
  summarize(sum(newCasesPerCap))

state_capita |>
  filter(state == "Ohio") |>
  summarize(sum(newCasesPerCap))

state_capita |>
  filter(state == "New York") |>
  summarize(sum(newCasesPerCap))

summarized_data <- bind_rows(
  state_capita |> 
    filter(state == "Colorado") |> 
    summarize(state = "Colorado", totalNewCasesPerCap = sum(newCasesPerCap, na.rm = TRUE)),

  state_capita |> 
    filter(state == "Alabama") |> 
    summarize(state = "Alabama", totalNewCasesPerCap = sum(newCasesPerCap, na.rm = TRUE)),

  state_capita |> 
    filter(state == "Ohio") |> 
    summarize(state = "Ohio", totalNewCasesPerCap = sum(newCasesPerCap, na.rm = TRUE)),

  state_capita |> 
    filter(state == "New York") |> 
    summarize(state = "New York", totalNewCasesPerCap = sum(newCasesPerCap, na.rm = TRUE))
)

summarized_data
```
#Q6 - Step 3: The summarized data indicated that the new caese per capita were 41.43 in Colorado, 14.49 in Alabama, 11.98 in Ohio, and 6.44 in New York. 

```{r}
ls(state_capita)

perCapNewCasesRoll = state_capita |>
  group_by(date, state) |>
  filter(state %in% c("Alabama", "New York", "Ohio", "Colorado")) |>
  group_by(state) |>
  mutate(newnewCasesPerCap = mean(sum(newCasesPerCap)),
         roll = zoo::rollmean(newCasesPerCap, k = 7, align = "right", fill = NA)) |>
  ungroup()

perCapNewCasesRoll <- perCapNewCasesRoll |>
  select(-CTYNAME)
```

```{r}
state_capita2 <- inner_join(state_covid, pop2, by = "state") |>
  mutate(cumPerCap = cases / POPESTIMATE2021,
         newCasesPerCap = NewCases / POPESTIMATE2021)

perCapNewCasesRoll2 = state_capita2 |>
  group_by(date, state) |>
  filter(state %in% c("New York", "Colorado", "Alabama", "Ohio")) |>
  group_by(state) |>
  mutate(newnewCasesPerCap = mean(sum(newCasesPerCap)),
         roll = zoo::rollmean(newCasesPerCap, k = 7, align = "right", fill = NA)) |>
  ungroup()

perCapNewCasesRoll2 <- perCapNewCasesRoll2 |>
  select(-CTYNAME)

perCapNewCasesRoll2 <- perCapNewCasesRoll2 %>%
  filter(!is.na(newCasesPerCap) & !is.na(roll))

perCapNewCasesRoll2 <- perCapNewCasesRoll2 %>%
  mutate(newCasesPerCap = ifelse(is.na(newCasesPerCap), 0, newCasesPerCap),
         roll = ifelse(is.na(roll), 0, roll))

ggplot(perCapNewCasesRoll2, aes(x = date)) +
  geom_line(aes(y = roll, color = state), size = 0.5) +  
  theme_linedraw() +
  scale_color_manual(values = c("green", "navy", "pink", "purple")) +
 scale_y_continuous(limits = c(0, 3.1)) +
  labs(title = "Seven Day Rolling Averages of New Cases",
       x = "Date", y = "New Cases Per Capita")
```

#Making Alabama more visible

```{r}
ggplot(perCapNewCasesRoll2, aes(x = date)) +
  geom_line(data = perCapNewCasesRoll2 %>% filter(state != "Alabama"), 
            aes(y = roll, color = state), size = 0.5) +
  
  geom_line(data = perCapNewCasesRoll2 %>% filter(state == "Alabama"), 
            aes(y = roll, color = state), size = 1) + 
  
  theme_linedraw() +
  scale_color_manual(values = c("pink", "navy", "green", "purple")) +
  scale_y_continuous(limits = c(0, 3.1)) +
  labs(title = "Seven-Day Rolling Averages of New Cases",
       x = "Date", y = "New Cases Per Capita")
  
```


#Q6 - Part 5: The influence scaling by population has on the analysis is that it normalizes the data, which allos for a more accurate comparison of COVID-19 cases across states with different population sizes. This is particularly important in reference to larger states, such as New York and Ohio, due to it possibly appearing less impacted since their new cases per capita are lower compared to raw case numbers. Whereas smaller states, like Alabama, could appear worse off in comparison due to their new cases per capita being possibly higher. This indicates a hgiher burden in correlation to their population size, which is where scaling makes larger states look better and small states look worse in terms of case severity.


#Question 7: Space & Time

```{r}
spatialdata = read_csv('https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/refs/heads/main/resources/county-centroids.csv') |>
  inner_join(covid) |>
  group_by(date) |>
  summarize(Cases_WeightedMean_x = sum(LON*cases) / sum(cases),
            Cases_WeightedMean_y = sum(LAT*cases) / sum(cases),
            cases = sum(cases)) |>
  arrange(date) |>
  mutate(Month = format(date, "%m")) |>
  mutate(d = 1:n())
```

```{r}
ggplot(spatialdata) +
  borders("state", fill = "gray90", colour = "white") +
  geom_point(aes(x = Cases_WeightedMean_x, y = Cases_WeightedMean_y), 
             color = "purple", alpha = 0.25) +
  labs(color = "Month",
       size = "cases", 
       x = "Longitude", y = "Latitude", 
       title = "COVID-19 Cases by Weighted Mean: Geographic Concentration") +
  theme(legend.position = "none")
```
#Q7 - Describe the movement of the COVID-19 weighted mean throughout the USA and possible drivers of its movement given your knowledge of the outbreak hot spots: This weighted mean of COVID-19 cases mapped geographically shows the movement of the weighted meean of the spread of COVID-19 throughout the mainland United States. The points representing the weighted mean are plotted on a state map, with the lucency of the color of the points indicating the intensity and timing of cases. This geographic concentration highlights how outbreaks shifted across regions, and the movement of the weighted mean is an indicator of the evolving hotspots throughout the pandemic.

#Question 8: Cases vs. Deaths

```{r}
Q8 = read_csv('https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/refs/heads/main/resources/county-centroids.csv') |>
  inner_join(covid) |>
  group_by(date) |>
  summarize(Cases_WeightedMean_x = sum(LON*cases) / sum(cases),
            Cases_WeightedMean_y = sum(LAT*cases) / sum(cases),
            cases = sum(cases), 
            Deaths_WeightedMean_x = sum(LON*deaths) / sum(deaths),
            Deaths_WeightedMean_y = sum(LAT*deaths) / sum(deaths),
            deaths = sum(deaths)) |>
  arrange(date) |>
  mutate(Month = format(date, "%m")) |>
  mutate(d = 1:n())
```

```{r, fig.width=14, fig.height=5}
library(patchwork)

ls(Q8)

ggplot(Q8) +
  borders("state", fill = "gray90", colour = "white") +
  geom_point(aes(x = Cases_WeightedMean_x, y = Cases_WeightedMean_y), 
             color = "purple", alpha = 0.15) +
  labs(color = "Month",
       size = "cases", 
       x = "Longitude", y = "Latitude", 
       title = "COVID-19 Cases by Weighted Mean: Geographic Concentration") +
  theme(legend.position = "none") |
  ggplot(Q8) +
  borders("state", fill = "gray90", colour = "white") +
  geom_point(aes(x = Deaths_WeightedMean_x, y = Deaths_WeightedMean_y), 
             color = "green", alpha = 0.15) +
  labs(color = "Month",
       size = "deaths", 
       x = "Longitude", y = "Latitude", 
       title = "COVID-19 Deaths by Weighted Mean: Geographic Concentration") +
  theme(legend.position = "none")

```

